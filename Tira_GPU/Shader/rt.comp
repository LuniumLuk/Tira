#version 460 core

//
// Created by Ziyi.Lu 2023/03/17
// Monte Carlo Path Tracing with GLSL Compute Shader
// Support following features:
//  1. BlinnPhong and Glass Material
//  2. Upto 32 diffuse textures
//  3. MIS for sampling area light and sampling the BSDF
//

// In each frame:
//  1. Render S samples of N tiles into render target texture, also record how many
//     samples each pixel rendered so far
//  2. Increment store texture with result from render target texture
//  3. Display scaled values of the store texture

// Compute shader local work group size,
// here we use size 4*4 for it performs best in my GPU.
layout(local_size_x = 4, local_size_y = 4, local_size_z = 1) in;

// Render target texture, record results of invokes in each frame,
// will be cleared at the begining of each frame.
layout(rgba32f, binding = 0) uniform image2D uRenderTarget;

// Sample counter, record samples rendered in each pixel implicitly 
// by recording 1 / (samples rendered).
layout(r32f, binding = 1) uniform image2D uSampleCounter;

uniform int uSPP;
uniform vec3 uCameraPos;
uniform mat3 uScreenToRaster;
uniform float uLightTotalArea;
uniform int uCurrentFrame;
uniform int uOffsetX;
uniform int uOffsetY;
uniform bool uEnableSun;
uniform vec3 uSunDirection;
uniform float uSunSolidAngle;
uniform vec3 uSunRadiance;
uniform int uSamplesPerFrame;
uniform bool uEnableEnvmap;
uniform float uEnvmapScale;

#define SAMPLE_SUN          0
#define SAMPLE_AREA_LIGHTS  1
#define SAMPLE_ENVMAP       2

// #define USE_GEOMETRY_NORMAL
// #define DEBUG_ENVMAP
// #define DEBUG_EDGE
// #define DEBUG_NORMAL
// #define DEBUG_UV
// #define DEBUG_DIFFUSE
// #define DEBUG_VISIBILITY
// #define DEBUG_RANDOM
// #define VISIBILITY_TEST_DIST
// #define ENABLE_BACKFACE_CULLING
#define ENABLE_ALPHA_TEST
#define MOROZ_MYKHAILO_RNG
#define PIXEL_COORDS_AS_SEED
#define SAMPLE_LIGHT

layout (binding = 30) uniform sampler2D uEnvmap;

#ifdef DEBUG_VISIBILITY
const int MAX_DEPTH                 = 1;
#else
const int MAX_DEPTH                 = 8;
#endif
const float T_MIN                   = 1e-4;
const float EPSILON                 = 1e-6;
const float FLT_MAX                 = 1e+30;
const float FLT_MIN                 = 1e-30;
const float PI                      = 3.14159265;
const float TWO_PI                  = PI * 2;
const float INV_PI                  = 1 / PI;
const float INV_TWO_PI              = 0.5 / PI;
const float ONE_DIV_PI              = 1 / PI;
const float PI_DIV_TWO              = PI / 2;
const float PI_DIV_THREE            = PI / 3;
const float PI_DIV_FOUR             = PI / 4;
const float OFFSET_RAY_ORIGIN_DELTA = 1e-12;

// RNG from code by Moroz Mykhailo https://www.shadertoy.com/view/wltcRS
uvec4 seed;

void initRNG(int i, ivec2 pixel) {
#ifdef PIXEL_COORDS_AS_SEED
    seed = uvec4(vec2(pixel), uint(uCurrentFrame + i), uint(pixel.x) + uint(pixel.y));
#else
    seed = uvec4(vec2(1, 2), uint(uCurrentFrame + i), 12);
#endif
}

void pcg4d(inout uvec4 v) {
    v = v * 1664525u + 1013904223u;
    v.x += v.y * v.w; v.y += v.z * v.x; v.z += v.x * v.y; v.w += v.y * v.z;
    v = v ^ (v >> 16u);
    v.x += v.y * v.w; v.y += v.z * v.x; v.z += v.x * v.y; v.w += v.y * v.z;
}

float rand() {
    pcg4d(seed); return float(seed.x) / float(0xffffffffu);
}

float random(in vec2 co){
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

vec2 hammersley(in uint i, in uint N) {
    const float tof = 0.5 / float(0x80000000U);
    uint bits = (i << 16u) | (i >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return vec2(float(i) / float(N), float(bits) * tof);
}

const vec2 INV_ATAN = vec2(0.1591549430918953, 0.3183098861837907);

vec2 directionToEquirectangularUV(in vec3 dir) {
    vec2 uv = vec2(atan(dir.z, dir.x), asin(dir.y));
    uv *= INV_ATAN;
    uv += 0.5;
    uv.y = 1.0 - uv.y;
    return uv;
}

vec3 getEnvmapLight(in vec3 wi) {
    vec2 uv = directionToEquirectangularUV(wi);
    return texture(uEnvmap, uv).rgb * uEnvmapScale;
}

vec3 getCameraRayDir(in int i, in ivec2 pixel, in ivec2 dim) {
    vec2 u = hammersley(uCurrentFrame + i, uSPP);
    float x = (float(pixel.x) + u.x - 0.5) / dim.x * 2 - 1;
    float y = (float(pixel.y) + u.y - 0.5) / dim.y * 2 - 1;

    return uScreenToRaster * vec3(x, y, 1);
}

vec3 sampleUnitHemisphere(vec2 u) {
    float phi = u.y * TWO_PI;
    float z = abs(1 - 2 * u.x);
    float r = sqrt(1 - z * z);
    float x = r * cos(phi);
    float y = r * sin(phi);
    return vec3(x, y, z);
}

struct Triangle {
    vec4 pos[3];
    vec4 normal;
    vec4 center;
    vec4 tangent;
    vec4 bitangent;
    vec4 vn[3];
    vec4 vt[3];
    vec4 e01;
    vec4 e02;
    vec4 bmin;
    vec4 bmax;
    vec4 info;      // has_vn (x), has_vt (y), area (z), material (w)
};

struct Material {
    vec4 emission;  // emission (xyz), emissive (w)
    vec4 diffuse;
    vec4 specular;
    vec4 transmittance;
    vec4 info;      // shininess (x), ior (y), isDelta (z)
};

struct BVHNode {
    vec4 bmin;
    vec4 bmax;
    int hitIdx;
    int missIdx;
    int firstPrim;
    int primCount;
};

layout (std430, binding = 2) buffer TriangleList { Triangle bTriangles[]; };
layout (std430, binding = 3) buffer MaterialList { Material bMaterials[]; };
layout (std430, binding = 4) buffer BVHNodeList { BVHNode bBVHNodes[]; };
layout (std430, binding = 5) buffer AreaLights { int bAreaLights[]; };

struct Ray {
    vec3 o;
    vec3 d;
    float tMin;
    float tMax;
    bool isDelta;
    bool isShadowRay;
};

float absDot(vec3 a, vec3 b) {
    return max(abs(dot(a, b)), 0.0001);
}

Ray initRay(in vec3 o, in vec3 d) {
    Ray r;
    r.o = o;
    r.d = d;
    r.tMin = T_MIN;
    r.tMax = FLT_MAX;
    r.isDelta = false;
    r.isShadowRay = false;
    return r;
}

vec3 rayAt(in Ray r, in float t) {
    return r.o + r.d * t;
}

struct Intersection {
    bool hit;
    bool backFace;
    vec3 position;
    vec3 normal;
    vec3 bitangent;
    vec3 tangent;
    float dist;
    vec2 uv;
    int material;
    int object;
};

Intersection initIntersection() {
    Intersection isect;

    isect.hit = false;
    isect.backFace = false;
    isect.dist = FLT_MAX;
    isect.material = -1;
    isect.object = -1;

    return isect;
}

void sampleTriangle(out Intersection isect, out float pdf, in int idx, in vec2 seed) {
#ifdef MOROZ_MYKHAILO_RNG
    vec2 u0 = vec2(rand(), rand());
#else
    vec2 u0 = vec2(random(seed.xy - vec2(1.14514, 1.919810)), random(seed.yx + vec2(1.232323, 6.545454)));
#endif
    Triangle tri = bTriangles[idx];
    float x = sqrt(u0.x);
    float y = u0.y;
    float u = x * (1 - y);
    float v = x * y;

    isect.hit = true;
    isect.position = tri.pos[0].xyz * (1 - x) + tri.pos[1].xyz * (x * (1 - y)) + tri.pos[2].xyz * (x * y);
#ifdef USE_GEOMETRY_NORMAL
    isect.normal = normalize(tri.normal.xyz);
#else
    if (tri.info.x > 0) {
        isect.normal = normalize(tri.vn[0].xyz * (1 - u - v) + tri.vn[1].xyz * u + tri.vn[2].xyz * v);
    }
    else {
        isect.normal = normalize(tri.normal.xyz);
    }
#endif
    isect.uv.x = u;
    isect.uv.y = v;
    isect.material = int(tri.info.w);
    isect.tangent = tri.tangent.xyz;
    isect.bitangent = tri.bitangent.xyz;
    isect.object = idx;

    pdf = 1 / tri.info.z;
}

void intersectTriangle(in Ray r, inout Intersection isect, in int idx) {
    Triangle tri = bTriangles[idx];

#ifdef ENABLE_BACKFACE_CULLING
    if (dot(r.d, tri.normal.xyz) > 0) {
        return;
    }
#endif

    vec3 pvec = cross(r.d, tri.e02.xyz);
    float det = dot(tri.e01.xyz, pvec);
    // Parallel to triangle.
    if (abs(det) < EPSILON) {
        return;
    }

    float det_inv = 1 / det;
    vec3 tvec = r.o - tri.pos[0].xyz;
    float u = dot(tvec, pvec) * det_inv;
    if (u < 0 || u > 1) {
        return;
    }

    vec3 qvec = cross(tvec, tri.e01.xyz);
    float v = dot(r.d, qvec) * det_inv;
    if (v < 0 || u + v > 1) {
        return;
    }

    float t = dot(tri.e02.xyz, qvec) * det_inv;

    if (t < r.tMin || t > r.tMax) {
        return;
    }

#ifdef ACCEPT_INTERSECTION_CLOSE_TO_LIGHT
    float diff = t - isect.dist;
    if (isect.material > -1 && bMaterials[isect.material].emission.w > 0) {
        if (diff > -1e-6) return;
    }
    else if (bMaterials[int(tri.info.w)].emission.w > 0) {
        if (diff > 1e-6) return;
    }
    else if (diff > 0) {
        return;
    }
#else
    if (isect.dist < t) return;
#endif

    vec2 uv = tri.vt[0].xy * (1 - u - v) + tri.vt[1].xy * u + tri.vt[2].xy * v;
#ifdef ENABLE_ALPHA_TEST
    int diffuseTexture = int(bMaterials[int(tri.info.w)].info.w);
    if (diffuseTexture > -1) {
        float alpha = getDiffuse(diffuseTexture, uv).a;
        if (alpha < 0.5) return;
    }
#endif

    isect.hit = true;
    isect.object = idx;
    isect.dist = t;
    isect.material = int(tri.info.w);
    isect.uv = uv;

    if (r.isShadowRay) {
        return;
    }

    isect.position = rayAt(r, t);
#ifdef USE_GEOMETRY_NORMAL
    isect.normal = normalize(tri.normal.xyz);
#else
    if (tri.info.x > 0) {
        isect.normal = normalize(tri.vn[0].xyz * (1 - u - v) + tri.vn[1].xyz * u + tri.vn[2].xyz * v);
    }
    else {
        isect.normal = normalize(tri.normal.xyz);
    }
#endif
    isect.backFace = dot(r.d, isect.normal) > 0;
    isect.tangent = tri.tangent.xyz;
    isect.bitangent = tri.bitangent.xyz;
}

bool intersectBound(in Ray r, in vec4 bmin, in vec4 bmax) {
    float tx1 = (bmin.x - r.o.x) / r.d.x;
    float tx2 = (bmax.x - r.o.x) / r.d.x;
    float tmin = min(tx1, tx2);
    float tmax = max(tx1, tx2);
    float ty1 = (bmin.y - r.o.y) / r.d.y;
    float ty2 = (bmax.y - r.o.y) / r.d.y;
    tmin = max(tmin, min(ty1, ty2));
    tmax = min(tmax, max(ty1, ty2));
    float tz1 = (bmin.z - r.o.z) / r.d.z;
    float tz2 = (bmax.z - r.o.z) / r.d.z;
    tmin = max(tmin, min(tz1, tz2));
    tmax = min(tmax, max(tz1, tz2));
    return tmax >= tmin && tmax > 0;
}

void intersectBVH(in Ray r, inout Intersection isect) {
    // for (int i = 0; i < bTriangles.length(); i++) {
    //     intersectTriangle(r, isect, i);
    // }
    int idx = 0;
    while (idx >= 0) {
        BVHNode node = bBVHNodes[idx];

        if (!intersectBound(r, node.bmin, node.bmax)) {
            idx = node.missIdx;
            continue;
        }

        if (node.primCount > 0) {
            for (int i = 0; i < node.primCount; i++) {
                intersectTriangle(r, isect, node.firstPrim + i);
            }
            idx = node.missIdx;
        }
        else {
            idx = node.hitIdx;
        }
    }
}

float visibilityTestHit(in vec3 P, in vec3 wi) {
    Ray ray;
    ray.o = P;
    ray.d = wi;
    ray.tMin = T_MIN;
    ray.tMax = FLT_MAX;
    ray.isShadowRay = true;

    Intersection isect = initIntersection();
    intersectBVH(ray, isect);

    if (isect.hit) return 0.0;

    return 1.0;
}

float visibilityTestObject(in vec3 P, in vec3 wi, in int object) {
    Ray ray;
    ray.o = P;
    ray.d = wi;
    ray.tMin = T_MIN;
    ray.tMax = FLT_MAX;
    ray.isShadowRay = true;

    Intersection isect = initIntersection();
    intersectBVH(ray, isect);

    if (isect.object == object) return 1.0;

    return 0.0;
}

float visibilityTestDistance(in vec3 P, in vec3 wi, in float dist) {
    Ray ray;
    ray.o = P;
    ray.d = wi;
    ray.tMin = T_MIN;
    ray.tMax = FLT_MAX;
    ray.isShadowRay = true;

    Intersection isect = initIntersection();
    intersectBVH(ray, isect);

    float d = isect.dist * 1.01;
    if (d >= dist) return 1.0;

    return 0.0;
}

void sampleLight(in vec3 P, in vec3 N, inout Intersection isect, inout vec3 wi, inout float pdf, inout float visibility, in vec2 seed) {
#ifdef MOROZ_MYKHAILO_RNG
    float p = rand() * uLightTotalArea;
#else
    float p = random(seed.xy + vec2(6.54321, 1.23456)) * uLightTotalArea;
#endif
    float cdf = 0.0;
    for (int i = 0; i < bAreaLights.length(); i++) {
        cdf += bTriangles[bAreaLights[i]].info.z / uLightTotalArea;
        if (cdf >= p) {
            sampleTriangle(isect, pdf, bAreaLights[i], vec2(seed.yx));
            pdf = 1 / uLightTotalArea;

            vec3 Q = isect.position;
            vec3 PQ = Q - P;
            wi = normalize(PQ);
            float PQ2 = dot(PQ, PQ);

            pdf *= PQ2 / max(dot(-wi, isect.normal), EPSILON);
            vec3 offset = dot(N, wi) < 0 ? -N * OFFSET_RAY_ORIGIN_DELTA : N * OFFSET_RAY_ORIGIN_DELTA;
#ifdef VISIBILITY_TEST_DIST
            visibility = visibilityTestDistance(P, wi, length(PQ));
#else
            visibility = visibilityTestObject(P, wi, isect.object);
#endif
            return;
        }
    }
}

vec3 sphericalToCartesian(in float theta, in float phi) {
    float sinTheta = sin(theta);
    float cosTheta = cos(theta);
    return vec3(
        sinTheta * cos(phi),
        sinTheta * sin(phi),
        cosTheta);
}

vec3 sphericalToCartesian(in float sinTheta, in float cosTheta, in float phi) {
    return vec3(
        sinTheta * cos(phi),
        sinTheta * sin(phi),
        cosTheta);
}

vec3 localToWorld(in vec3 dir, in vec3 N) {
    // [NOTE] Serious bug here when old code is:
    // vec3 B;
    vec3 B = vec3(0.0);
    if (abs(N.x) > abs(N.y)){
        float lenInv = 1 / sqrt(N.x * N.x + N.z * N.z);
        B.x =  N.z * lenInv;
        B.z = -N.x * lenInv;
    }
    else {
        float lenInv = 1 / sqrt(N.y * N.y + N.z * N.z);
        B.y =  N.z * lenInv;
        B.z = -N.y * lenInv;
    }
    vec3 T = cross(B, N);
    return T * dir.x + B * dir.y + N * dir.z;
}

vec3 uniformSampleCone(in vec2 u, float cosThetaMax) {
    float cosTheta = (1.0 - u.x) + u.x * cosThetaMax;
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
    float phi = u.y * TWO_PI;
    return sphericalToCartesian(sinTheta, cosTheta, phi);
}

void sampleSun(in vec3 P, in vec3 N, inout Intersection isect, inout vec3 wi, inout float pdf, inout float visibility, in vec2 seed) {
    pdf = 0.0;
#ifdef MOROZ_MYKHAILO_RNG
    vec2 u = vec2(rand(), rand());
#else
    vec2 u = vec2(random(seed.xy), random(seed.yx));
#endif
    float cosThetaMax = 1.0 - uSunSolidAngle * TWO_PI;
    vec3 dir = uniformSampleCone(u, cosThetaMax);
    wi = normalize(localToWorld(dir, uSunDirection));

    if (dot(wi, N) > 0) {
        pdf = 1.0 / uSunSolidAngle;
    }

    visibility = visibilityTestHit(P, wi);
}

void sampleEnvmap(in vec3 P, in vec3 N, inout Intersection isect, inout vec3 wi, inout float pdf, inout float visibility, in vec2 seed) {
#ifdef MOROZ_MYKHAILO_RNG
    vec2 u = vec2(rand(), rand());
#else
    vec2 u = vec2(random(seed.xy), random(seed.yx));
#endif
    vec3 dir = sampleUnitHemisphere(u);
    wi = normalize(localToWorld(dir, N));
    pdf = INV_TWO_PI;

    visibility = visibilityTestHit(P, wi);
}

float colorToLuminance(in vec3 color) {
    return 0.3 * color.x + 0.59 * color.y + 0.11 * color.z;
}

float pow5(float x) {
    float x2 = x * x;
    return x2 * x2 * x;
}

float fresnelSchlick(float NoV, float eta) {
    float R0 = (1 - eta) / (1 + eta);
    R0 *= R0;
    return R0 + (1 - R0) * pow5(1 - NoV);
}

vec3 bsdfDiffuse(in Material mat, in vec2 uv) {
    if (int(mat.info.w) > -1) {
        return getDiffuse(int(mat.info.w), uv).rgb * INV_PI;
    }
    else {
        return mat.diffuse.rgb * INV_PI;
    }
}

vec3 bsdfSpecular(in Material mat, in vec3 wo, in vec3 wi, in vec3 N) {
    float NoL = dot(N, wi);
    float NoV = dot(N, wo);

    if (NoL > 0 && NoV > 0) {
        vec3 refl = reflect(-wo, N);
        float a = max(dot(refl, wi), 0.0);
        return mat.specular.rgb * (2.0 + mat.info.x) * INV_TWO_PI * pow(a, mat.info.x);
    }

    return vec3(0.0);
}

vec3 bsdfRefract(in Material mat, in vec3 wo, in vec3 wi, in vec3 N, in float pr) {
    float NoV = dot(N, wo);
    float NoL = dot(N, wi);

    if (NoL * NoV < 0 && pr > EPSILON) {
        return mat.transmittance.xyz;
    }

    return vec3(0.0);
}

vec3 calcProbabilities(in Material mat, in vec3 wo, in vec3 N) {
    float pd = colorToLuminance(mat.diffuse.xyz);
    float ps = colorToLuminance(mat.specular.xyz);
    float pr = 0.0;

    float ior = mat.info.y;
    if (abs(1 - ior) > EPSILON) {
        float NoV = absDot(wo, N);
        float R0 = (1 - ior) / (1 + ior);
        R0 *= R0;

        pr = colorToLuminance(mat.transmittance.xyz) * (1.0 - fresnelSchlick(NoV, R0));
    }

    float inv_wt = 1 / (pd + ps + pr);
    pd *= inv_wt;
    ps *= inv_wt;
    pr *= inv_wt;

    return vec3(pd, ps, pr);
}

float pdfMaterialBlinnPhong(in Material mat, in vec3 wo, in vec3 wi, in vec3 tangent, in vec3 bitangent, in vec3 N) {
    vec3 PR = calcProbabilities(mat, wo, N);
    float pd = PR.x;
    float ps = PR.y;
    float pr = PR.z;

    float pDiffuse  = INV_PI * dot(wi, N);
    vec3 refl = reflect(-wo, N);
    float cos = max(dot(refl, wi), 0.0);
    float pSpecular = (mat.info.x + 1) * INV_TWO_PI * pow(cos, mat.info.x);
    float pRefract  = 1.0;
    return pd * pDiffuse + ps * pSpecular + pr * pRefract;
}

float pdfMaterialGlass(in Material mat, in vec3 wo, in vec3 wi, in vec3 tangent, in vec3 bitangent, in vec3 N) {
    return 1.0;
}

void sampleMaterialBlinnPhong(in Material mat, in vec3 wo, in vec3 N, out vec3 wi, in vec3 tangent, in vec3 bitangent, out float pdf, inout bool isDelta, in vec2 seed) {
    pdf = 0.0;
    wi = vec3(1.0);
    isDelta = false;

#ifdef MOROZ_MYKHAILO_RNG
    vec2 u = vec2(rand(), rand());
    float rnd = rand();
#else
    vec2 u = vec2(random(seed.xy), random(seed.yx - vec2(3.333333, 8.636363)));
    float rnd = random(seed + vec2(2.878787, 0.171717));
#endif


    vec3 PR = calcProbabilities(mat, wo, N);
    float pd = PR.x;
    float ps = PR.y;
    float pr = PR.z;

    if (rnd < pd) {
        // Sample diffuse.
        float theta = acos(sqrt(u.x));
        float phi = u.y * TWO_PI;

        vec3 dir = sphericalToCartesian(theta, phi);
        wi = localToWorld(dir, N);
    }
    else if (rnd < pd + ps) {
        // Sample specular.
        float cos = pow(u.x, 1 / (mat.info.x + 1));
        vec3 refl = reflect(-wo, N);
        float theta = acos(cos);
        float phi = u.y * TWO_PI;

        vec3 dir = sphericalToCartesian(theta, phi);
        wi = localToWorld(dir, refl);

        if (mat.info.x > 500) {
            isDelta = true;
        }
    }
    else {
        // Sample refract.
        bool backFace = dot(N, wo) < 0;
        if (backFace) {
            wi = refract(-wo, -N, mat.info.y);
        }
        else {
            wi = refract(-wo, N, 1 / mat.info.y);
        }

        if (dot(wi, wi) < EPSILON) {
            wi = reflect(-wo, N);
        }
        isDelta = true;
    }

    wi = normalize(wi);
    pdf = pdfMaterialBlinnPhong(mat, wo, wi, tangent, bitangent, N);
}

void sampleMaterialGlass(in Material mat, in vec3 wo, in vec3 N, out vec3 wi, in vec3 tangent, in vec3 bitangent, out float pdf, inout bool isDelta, in vec2 seed) {
    float NoV = dot(N, wo);
    bool backFace = NoV < 0;
    float eta = backFace ? mat.info.y : 1.0 / mat.info.y;
    vec3 normal = backFace ? -N : N;

    // [TODO] Apply this to CPU version
    float cosTheta = min(dot(wo, normal), 1.0);
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

    bool cannotRefract = eta * sinTheta > 1.0;

#ifdef MOROZ_MYKHAILO_RNG
    if (cannotRefract || rand() < fresnelSchlick(cosTheta, eta)) {
#else
    if (cannotRefract || random(seed) < fresnelSchlick(cosTheta, eta)) {
#endif
        wi = reflect(-wo, normal);
    }
    else {
        wi = refract(-wo, normal, eta);
    }

    wi = normalize(wi);
    pdf = 1.0;
    isDelta = true;
}

vec3 evalMaterialBlinnPhong(in Material mat, in vec3 wo, in vec3 wi, in vec3 N, in vec2 uv, in vec3 tangent, in vec3 bitangent) {
    float NoL = dot(N, wi);
    float NoV = dot(N, wo);

    vec3 PR = calcProbabilities(mat, wo, N);
    float pr = PR.z;

    vec3 fd = vec3(0.0);
    if (NoL > 0 && NoV > 0) {
        fd = bsdfDiffuse(mat, uv);
    }
    vec3 fs = bsdfSpecular(mat, wo, wi, N);
    vec3 fr  = bsdfRefract(mat, wo, wi, N, pr);

    return fd + fs + fr;
}

vec3 evalMaterialGlass(in Material mat, in vec3 wo, in vec3 wi, in vec3 N, in vec2 uv, in vec3 tangent, in vec3 bitangent) {
    return mat.transmittance.rgb;
}

float pdfMaterial(in Material mat, in vec3 wo, in vec3 wi, in vec3 tangent, in vec3 bitangent, in vec3 N) {
    if (int(mat.info.z) == 0) {
        return pdfMaterialBlinnPhong(mat, wo, wi, tangent, bitangent, N);
    }
    else {
        return pdfMaterialGlass(mat, wo, wi, tangent, bitangent, N);
    }
}

void sampleMaterial(in Material mat, in vec3 wo, in vec3 N, out vec3 wi, in vec3 tangent, in vec3 bitangent, out float pdf, inout bool isDelta, in vec2 seed) {
    if (int(mat.info.z) == 0) {
        sampleMaterialBlinnPhong(mat, wo, N, wi, tangent, bitangent, pdf, isDelta, seed);
    }
    else {
        sampleMaterialGlass(mat, wo, N, wi, tangent, bitangent, pdf, isDelta, seed);
    }
}

vec3 evalMaterial(in Material mat, in vec3 wo, in vec3 wi, in vec3 N, in vec2 uv, in vec3 tangent, in vec3 bitangent) {
    if (int(mat.info.z) == 0) {
        return evalMaterialBlinnPhong(mat, wo, wi, N, uv, tangent, bitangent);
    }
    else {
        return evalMaterialGlass(mat, wo, wi, N, uv, tangent, bitangent);
    }
}

float balancedHeuristic(float n0, float pdf0, float n1, float pdf1) {
    float f0 = n0 * pdf0;
    float f1 = n1 * pdf1;
    return f0 / (f0 + f1);
}

float powerHeuristic(float n0, float pdf0, float n1, float pdf1) {
    float f0 = n0 * pdf0;
    float f1 = n1 * pdf1;
    return (f0 * f0) / (f0 * f0 + f1 * f1);
}

vec3 calculateDirectLight(in int type, in int depth, in Ray ray, in Intersection isect, inout vec3 wi, inout vec3 bsdf, inout float pdf, inout bool isDelta) {
    isDelta = false;
    vec3 wo = -ray.d;
    vec3 Ld = vec3(0.0);

    float pdfLight = 0.0;
    float geom = 1.0;
    pdf = 0.0;
    bool isBlack = false;
    // MIS weight
    float weight = 1.0;
    vec2 seed;

#ifdef SAMPLE_LIGHT
    Intersection isectLight = initIntersection();
    vec3 Li;
    if (type == SAMPLE_AREA_LIGHTS) {
        // Sampling the lights ---- area sampling strategy.
        sampleLight(isect.position, isect.normal, isectLight, wi, pdfLight, geom, vec2(isect.position.xy + vec2(depth)));
        Li = bMaterials[isectLight.material].emission.rgb;
    }
    else if (type == SAMPLE_SUN) {
        sampleSun(isect.position, isect.normal, isectLight, wi, pdfLight, geom, vec2(isect.position.xy + vec2(depth)));
        Li = uSunRadiance;
    }
    else if (type == SAMPLE_ENVMAP) {
        sampleEnvmap(isect.position, isect.normal, isectLight, wi, pdfLight, geom, vec2(isect.position.xy + vec2(depth)));
        Li = getEnvmapLight(wi);
    }

    isBlack = dot(Li, Li) < EPSILON;

    if (pdfLight > EPSILON && !isBlack) {
        vec3 f = evalMaterial(bMaterials[isect.material], wo, wi, isect.normal, isect.uv, isect.tangent, isect.bitangent) * absDot(wi, isect.normal);

#ifdef MIS
        pdf = pdfMaterial(bMaterials[isect.material], wo, wi, isect.tangent, isect.bitangent, isect.normal);
        weight = powerHeuristic(1.0, pdfLight, 1.0, pdf);
#endif

#ifdef DEBUG_VISIBILITY
        return vec3(geom);
#endif

        isBlack = dot(f, f) < EPSILON;
        if (!isBlack) {
            Ld += Li * f * geom * weight / pdfLight;
        }
    }

#ifdef MIS
    seed = isect.position.xy;
    sampleMaterial(bMaterials[isect.material], wo, isect.normal, wi, isect.tangent, isect.bitangent, pdf, isDelta, seed);
    bsdf = evalMaterial(bMaterials[isect.material], wo, wi, isect.normal, isect.uv, isect.tangent, isect.bitangent);
    if (!isDelta) {
        bsdf = bsdf * absDot(wi, isect.normal);
    }

    isBlack = dot(bsdf, bsdf) < EPSILON;
    if (!isBlack && pdf > EPSILON) {
        vec3 P = isect.position;
        {
            Intersection isect0 = initIntersection();
            Ray ray0 = initRay(P, wi);
            ray.isShadowRay = true;
            intersectBVH(ray0, isect0);
            isBlack = true;
            if (type == SAMPLE_AREA_LIGHTS && isect0.hit && bMaterials[isect0.material].emission.w > 0 && dot(wi, isect0.normal) < 0) {
                pdfLight = 1.0 / uLightTotalArea;
                Li = bMaterials[isect0.material].emission.rgb;
                isBlack = false;
            }
            else if (type == SAMPLE_SUN && !isect0.hit && dot(uSunDirection, wi) > (1.0 - uSunSolidAngle * TWO_PI)) {
                pdfLight = 1.0 / uSunSolidAngle;
                Li = uSunRadiance;
                isBlack = false;
            }
            else if (type == SAMPLE_ENVMAP && !isect0.hit) {
                pdfLight = INV_TWO_PI;
                Li = getEnvmapLight(wi);
                isBlack = false;
            }
        }

        weight = powerHeuristic(1.0, pdf, 1.0, pdfLight);

        if (!isBlack) {
            Ld += Li * bsdf * weight / pdf;
        }
    }
#endif
#endif
    seed = isect.position.yx;
    sampleMaterial(bMaterials[isect.material], wo, isect.normal, wi, isect.tangent, isect.bitangent, pdf, isDelta, seed);
    bsdf = evalMaterial(bMaterials[isect.material], wo, wi, isect.normal, isect.uv, isect.tangent, isect.bitangent);
    if (!isDelta) bsdf *= absDot(wi, isect.normal);

    return Ld;
}

void main() {
    ivec2 pixel = ivec2(gl_GlobalInvocationID.x + uOffsetX, gl_GlobalInvocationID.y + uOffsetY);
    ivec2 dim = imageSize(uRenderTarget);

#ifdef DEBUG_RANDOM
    vec3 test = vec3(0.0);
    for (int i = 0; i < uSamplesPerFrame; ++i) {
        initRNG(i, pixel);
        test += vec3(rand(), rand(), rand());
    }
    imageStore(uRenderTarget, pixel, vec4(test / uSamplesPerFrame, 1.0));
    imageStore(uSampleCounter, pixel, vec4(float(uSamplesPerFrame) / (uCurrentFrame + uSamplesPerFrame), 0.0, 0.0, 1.0));
    return;
#endif

    vec3 color = vec3(0.0);
    for (int i = 0; i < uSamplesPerFrame; ++i) {
        initRNG(i, pixel);

        vec3 L = vec3(0.0);
        vec3 attenuation = vec3(1.0);
        Ray ray = initRay(uCameraPos, normalize(getCameraRayDir(i, pixel, dim)));

        int depth = 0;
        while (depth < MAX_DEPTH) {
            Intersection isect = initIntersection();
            intersectBVH(ray, isect);

#ifdef DEBUG_ENVMAP
            if (!isect.hit) {
                L += attenuation * getEnvmapLight(ray.d);
            }
            break;
#endif

#ifdef DEBUG_EDGE
            if (isect.hit) {
                if (dot(isect.normal, -ray.d) < 0) {
                    L = vec3(1.0);
                }
            }
            break;
#endif

#ifdef DEBUG_NORMAL
            if (isect.hit) {
                L = isect.normal * 0.5 + 0.5;
            }
            break;
#endif

#ifdef DEBUG_UV
            if (isect.hit) {
                L = vec3(isect.uv, 0.0);
            }
            break;
#endif

#ifdef DEBUG_DIFFUSE
            if (isect.hit) {
                L = bsdfDiffuse(bMaterials[isect.material], isect.uv) * PI;
            }
            break;
#endif

            if (!isect.hit) {
                if (uEnableSun && dot(uSunDirection, ray.d) > (1.0 - uSunSolidAngle * TWO_PI)) {
                    L += attenuation * uSunRadiance;
                }
                if (uEnableEnvmap) {
                    L += attenuation * getEnvmapLight(ray.d);
                }
                break;
            }

            if (bMaterials[isect.material].emission.w > 0) {
                if (depth == 0 || ray.isDelta) {
                    L += attenuation * bMaterials[isect.material].emission.rgb;
                }
                break;
            }

            vec3 wi;
            vec3 f = vec3(0.0);
            float pdf = 0.0;

            if (bMaterials[isect.material].info.z > 0) {
                sampleMaterial(bMaterials[isect.material], -ray.d, isect.normal, wi, isect.tangent, isect.bitangent, pdf, ray.isDelta, vec2(isect.position.xy + vec2(1.221122, 8.888888)));
                attenuation *= evalMaterial(bMaterials[isect.material], -ray.d, wi, isect.normal, isect.uv, isect.tangent, isect.bitangent);
                
                ray.d = wi;
                vec3 offset = dot(isect.normal, wi) < 0 ? -isect.normal * OFFSET_RAY_ORIGIN_DELTA : isect.normal * OFFSET_RAY_ORIGIN_DELTA;
                ray.o = isect.position + offset;
                ++depth;
                continue;
            }

            if (uLightTotalArea > 0)
                L += attenuation * calculateDirectLight(SAMPLE_AREA_LIGHTS, depth, ray, isect, wi, f, pdf, ray.isDelta);
            if (uEnableSun)
                L += attenuation * calculateDirectLight(SAMPLE_SUN, depth, ray, isect, wi, f, pdf, ray.isDelta);
            if (uEnableEnvmap)
                L += attenuation * calculateDirectLight(SAMPLE_ENVMAP, depth, ray, isect, wi, f, pdf, ray.isDelta);

            if (pdf > EPSILON && dot(f, f) > EPSILON) {
                attenuation *= f / pdf;
            }

            ray.d = wi;
            vec3 offset = dot(isect.normal, wi) < 0 ? -isect.normal * OFFSET_RAY_ORIGIN_DELTA : isect.normal * OFFSET_RAY_ORIGIN_DELTA;
            ray.o = isect.position + offset;

            ++depth;
        }

        if (isnan(L.r) || isnan(L.g) || isnan(L.b) || isinf(L.r) || isinf(L.g) || isinf(L.b)) {
            L = vec3(0.0);
        }

        color += L;
    }   

    color /= uSamplesPerFrame;
    imageStore(uRenderTarget, pixel, vec4(color, 1.0));
    imageStore(uSampleCounter, pixel, vec4(1 / float(uCurrentFrame + uSamplesPerFrame) * uSamplesPerFrame, 0.0, 0.0, 1.0));
}
